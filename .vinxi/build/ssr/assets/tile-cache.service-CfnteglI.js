import{g as l,M as o}from"./db-PRkUVS-C.js";class u{cache;maxSize;defaultTTL;tileRepository;async getOrGenerate(e,a,i){const s=this.get(e,a);if(s)return s;const h=await this.tileRepository.getTile(e,a);if(h)return this.set(h),h;const n=await i(e,a);return await this.tileRepository.saveTile(n),this.set(n),n}constructor(e,a=1e3,i=1e4){this.cache=new Map,this.maxSize=a,this.defaultTTL=i,this.tileRepository=e}getCacheKey(e,a){return`${e},${a}`}get(e,a){const i=this.getCacheKey(e,a),s=this.cache.get(i);return s?Date.now()>s.timestamp+s.ttl?(this.cache.delete(i),null):s.data:null}set(e,a=this.defaultTTL){if(!e||e.tileX==null||e.tileY==null||!e.data)throw new Error("Invalid tile data");if(this.cache.size>=this.maxSize){const s=this.cache.keys().next().value;s&&this.cache.delete(s)}const i=this.getCacheKey(e.tileX,e.tileY);this.cache.set(i,{data:{...e},timestamp:Date.now(),ttl:a||this.defaultTTL})}invalidate(e,a){const i=this.getCacheKey(e,a);this.cache.delete(i)}clear(){this.cache.clear()}getStats(){return{size:this.cache.size,maxSize:this.maxSize,defaultTTL:this.defaultTTL}}}let r=null;async function c(){if(!r){const t=await l(),e=new o(t);r=new u(e)}return r}const g={getOrGenerate:(...t)=>c().then(e=>e.getOrGenerate(...t)),get:(...t)=>c().then(e=>e.get(...t)),set:(...t)=>c().then(e=>e.set(...t)),invalidate:(...t)=>c().then(e=>e.invalidate(...t)),clear:()=>c().then(t=>t.clear()),getStats:()=>c().then(t=>t.getStats())};export{g as t};
