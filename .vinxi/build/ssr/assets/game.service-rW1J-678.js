import{B as i,g as n}from"./db-PRkUVS-C.js";import{getOldestPrimeTimestamp as m}from"./randomSlopes-izTC2X1N.js";class u{constructor(t){this.db=t}async setGameJoined(t,e){await this.db.run('UPDATE users SET game_joined = ?, updated_at_ms = strftime("%s", "now") * 1000 WHERE id = ?',[e,t])}setGameJoinedStatus=this.setGameJoined;async setHomePosition(t,e,s){await this.db.run('UPDATE users SET home_x = ?, home_y = ?, updated_at_ms = strftime("%s", "now") * 1000 WHERE id = ?',[e,s,t])}async getGameStatus(t){const e=await this.db.get("SELECT game_joined, home_x, home_y FROM users WHERE id = ?",[t]);return e?{gameJoined:e.game_joined,homeX:e.home_x,homeY:e.home_y}:null}getUserGameStatus=this.getGameStatus;async getUserById(t){const e=await this.db.get("SELECT * FROM users WHERE id = ?",[t]);return e?{id:e.id,username:e.username,email:e.email||void 0,createdAt:new Date(e.created_at_ms).toISOString(),updatedAt:new Date(e.updated_at_ms).toISOString(),gameJoined:e.game_joined,homeX:e.home_x,homeY:e.home_y}:null}}class d{userRepository;basePointRepository;constructor(t){this.userRepository=new u(t),this.basePointRepository=new i(t)}async executeTransaction(t){const e=await n();try{await e.run("BEGIN TRANSACTION");const s=await t();return await e.run("COMMIT"),s}catch(s){throw await e.run("ROLLBACK"),s}}async joinGame(t){try{return await this.executeTransaction(async()=>{const e=await this.userRepository.getGameStatus(t);if(console.log(`[joinGame] currentStatus: ${JSON.stringify(e)}`),!e)return{success:!1,gameJoined:!1,homeX:0,homeY:0,error:"User not found",message:"User account could not be found."};if(e.gameJoined)return{success:!0,gameJoined:!0,homeX:e.homeX,homeY:e.homeY,message:"You have already joined the game."};const s=await this.basePointRepository.getOldest();let o=0,a=0;return s&&(console.log(`[joinGame] oldestBase: ${JSON.stringify(s)}`),s.x<0?o=s.x+3:o=s.x-3,s.y<0?a=s.y+2:a=s.y-2,await this.basePointRepository.delete(s.id),console.log(`[joinGame] Deleted oldest base point ${s.id} at (${s.x}, ${s.y})`)),await this.userRepository.setHomePosition(t,o,a),await this.userRepository.setGameJoined(t,!0),await this.basePointRepository.create({userId:t,x:o,y:a,gameCreatedAtMs:(m()??Date.now())-1}),console.log(`[joinGame] Created new base point for ${t} at (${o}, ${a})`),{success:!0,gameJoined:!0,homeX:o,homeY:a,message:"Successfully joined the game! Your home base has been established."}})}catch(e){return console.error("Error in joinGame:",e),{success:!1,gameJoined:!1,homeX:0,homeY:0,error:"Failed to join game",message:"An unexpected error occurred while joining the game."}}}async leaveGame(t){try{return await this.executeTransaction(async()=>{const e=await this.userRepository.getGameStatus(t);return e?e.gameJoined?(await this.userRepository.setGameJoined(t,!1),{success:!0,message:"You have left the game. Your base remains on the map."}):{success:!0,message:"You have not joined the game yet."}:{success:!1,error:"User not found",message:"User account could not be found."}})}catch(e){return console.error("Error in leaveGame:",e),{success:!1,error:"Failed to leave game",message:"An unexpected error occurred while leaving the game."}}}async getGameStatus(t){try{const e=await this.userRepository.getGameStatus(t);return e?{success:!0,gameJoined:e.gameJoined,homeX:e.homeX,homeY:e.homeY,message:e.gameJoined?`Your home base is at (${e.homeX}, ${e.homeY})`:"You have not joined the game yet."}:{success:!1,gameJoined:!1,homeX:0,homeY:0,error:"User not found",message:"User account could not be found."}}catch(e){return console.error("Error in getGameStatus:",e),{success:!1,gameJoined:!1,homeX:0,homeY:0,error:"Failed to retrieve game status",message:"An error occurred while retrieving your game status."}}}}export{d as G};
