class s{static instance;metrics=[];MAX_METRICS=1e3;constructor(){}static getInstance(){return s.instance||(s.instance=new s),s.instance}track(t,e,i={}){this.metrics.push({timestamp:Date.now(),operation:t,duration:e,data:i}),this.metrics.length>this.MAX_METRICS&&(this.metrics=this.metrics.slice(-this.MAX_METRICS))}getMetrics(t){return t?this.metrics.filter(e=>e.operation===t):[...this.metrics]}getAverageDuration(t,e=100){const i=this.getMetrics(t).slice(-e);return i.length===0?0:i.reduce((n,r)=>n+r.duration,0)/i.length}shouldOptimize(t,e){return this.getAverageDuration(t)>e}}const a=s.getInstance();export{a as p};
