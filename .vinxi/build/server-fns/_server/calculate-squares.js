import{g as D,B as M}from"./assets/db-97-DOlOW.js";import{w as T}from"./assets/auth-BVUYsDc6.js";import{g as G,a as _}from"./assets/api-D3monypt.js";import{B as n}from"./assets/game-eWeYT9Is.js";import{p as A}from"./assets/performance-CpMIxBac.js";import"sqlite3";import"sqlite";import"fs";import"path";import"./assets/utils-AQpNWTN2.js";import"pako";import"./assets/jwt-CO0ye28h.js";import"jsonwebtoken";const B={up:[0,0],down:[0,0],right:[0,0],left:[0,0]},W=T(async({request:S,user:O})=>{const m=G(),g=performance.now();try{const{borderIndices:o,currentPosition:s,direction:h}=await S.json(),b=performance.now(),R=await D(),a=await new M(R).getAll();if(!Array.isArray(a))throw new Error(`Expected basePoints to be an array, got ${typeof a}`);const f=a.length>0?[...new Map(a.map(e=>[`${e.x},${e.y}`,e])).values()]:[{x:0,y:0,userId:"default"}],[q,E]=B[h],x=o.flatMap((e,k)=>{const i=e%n.GRID_SIZE-s[0],c=Math.floor(e/n.GRID_SIZE)-s[1];return f.flatMap(({x:y,y:I})=>{if(y===i&&I===c)return[];const t=Math.abs(i-y),r=Math.abs(c-I);if(t===0||r===0||t===r||2*t===r||2*r===t||3*t===r||3*r===t||5*t===r||5*r===t){const p=i+s[0]+q,u=c+s[1]+E;return p>=0&&p<n.GRID_SIZE&&u>=0&&u<n.GRID_SIZE?[p+u*n.GRID_SIZE]:[]}return[]})}),P=new Set(o),d={success:!0,data:{squares:[...new Set(x)].filter(e=>P.has(e))}},l=performance.now()-b,w=performance.now()-g;return A.track("calculate-squares",w,{basePointCount:f.length,responseSize:JSON.stringify(d).length,dbTime:l,processingTime:w-l}),new Response(JSON.stringify(d),{headers:{"Content-Type":"application/json"},status:200})}catch(o){console.error(`[${m}] Error in calculate-squares:`,o);const s=o instanceof Error?o.message:"Unknown error";return _("Failed to calculate squares",500,s,{requestId:m})}});export{W as POST};
