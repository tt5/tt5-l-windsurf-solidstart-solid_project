# how to run admin enpoint

register with name "admin" and password "a"
curl -c cookies.txt -X POST http://localhost:3000/api/auth/login   -H "Content-Type: application/json"   -d '{"username": "admin", "password": "a"}'
curl -b cookies.txt -X POST http://localhost:3000/api/cleanup-lines \
  -H "Content-Type: application/json"

http POST :3000/api/calculate-squares "Cookie:auth_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJ1c2VyX2QwNjIyNTBlNzVhMGViN2Y1OGFiM2E4NmRlYTI4Y2Q3IiwidXNlcm5hbWUiOiJ0ZXN0dXNlciIsImlhdCI6MTc1ODIwMjMyNiwiZXhwIjoxNzU4ODA3MTI2fQ.n_yVhmPKNTDRnL9zoM9jvq_bJPfBaq1CcbDJ5_3_HRY"

http POST :3000/api/calculate-squares "Cookie:auth_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJ1c2VyX2QwNjIyNTBlNzVhMGViN2Y1OGFiM2E4NmRlYTI4Y2Q3IiwidXNlcm5hbWUiOiJ0ZXN0dXNlciIsImlhdCI6MTc1ODIwMjMyNiwiZXhwIjoxNzU4ODA3MTI2fQ.n_yVhmPKNTDRnL9zoM9jvq_bJPfBaq1CcbDJ5_3_HRY" < request.json

podman run -dt --pod new:superstar localhost/superstar:latest

podman build -t superstar .
podman kube play --replace --network host pod.yml
podman kube down pod.yml

podman build -t localhost:32000/superstar:latest .
podman push localhost:32000/superstar:latest --tls-verify=false
microk8s kubectl apply -f microk8s-deployment.yml
NODE_PORT=$(microk8s kubectl get svc superstar-service -o=jsonpath='{.spec.ports[0].nodePort}')
curl http://localhost:${NODE_PORT}

kubectl get crd gateways.gateway.networking.k8s.io || \
  { kubectl kustomize "github.com/kubernetes-sigs/gateway-api/config/crd?ref=v1.0.0" | kubectl apply -f -; }

kubectl apply -f https://projectcontour.io/quickstart/contour-gateway-provisioner.yaml
kubectl apply -f gateway-api-resources.yml

Get the external IP (if using LoadBalancer)
kubectl get svc -n projectcontour

Or use port-forwarding for testing
kubectl port-forward -n projectcontour svc/envoy-superstar-gateway 8080:80

kubectl rollout restart deployment/superstar

Implementation Example:
In your Kubernetes deployment, services would call each other using internal DNS:
typescript
// In your service code
const response = await fetch('http://other-service.namespace.svc.cluster.local/api/endpoint', {
  headers: {
    'Authorization': `Bearer ${jwtToken}`
  }
});

Security Considerations:
Use Kubernetes NetworkPolicies to restrict pod-to-pod communication
Store JWT secret in Kubernetes Secrets
Mount the secret to all pods that need to validate tokens

microk8s enable dashboard

token=microk8s enable dashboard
kubectl port-forward -n kube-system service/kubernetes-dashboard 10442:443
kubectl -n kube-system get secret   $(kubectl -n kube-system get secret | grep "microk8s-dashboard-token" | awk '{print $1}')   -o jsonpath='{.data.token}' | base64 --decode